/**
 * @module @zk-kit/artifacts
 * @version 1.4.1
 * @file Utilities for downloading snark artifacts
 * @copyright Ethereum Foundation 2024
 * @license MIT
 * @see [Github]{@link https://github.com/privacy-scaling-explorations/snark-artifacts/tree/main/packages/artifacts}
*/
var Project;
(function (Project) {
    Project["SEMAPHORE_IDENTITY"] = "semaphore-identity";
    Project["POSEIDON"] = "poseidon";
    // RLN = 'rln',
    Project["SEMAPHORE"] = "semaphore";
})(Project || (Project = {}));
const projects = Object.values(Project);

async function getAvailableVersions(project) {
    const res = await fetch(`https://registry.npmjs.org/@zk-kit/${project}-artifacts`);
    const { versions } = await res.json();
    return Object.keys(versions);
}
async function isVersionAvailableOrThrow(project, version) {
    const availableVersions = await getAvailableVersions(project);
    if (version !== 'latest' && !availableVersions.includes(version))
        throw new Error(`Version '${version}' is not available for project '${project}'`);
}
async function getBaseUrls(project, version) {
    await isVersionAvailableOrThrow(project, version);
    return [
        `https://unpkg.com/@zk-kit/${project}-artifacts@${version}/${project}`,
        `https://raw.githubusercontent.com/privacy-scaling-explorations/snark-artifacts/@zk-kit/${project}-artifacts@${version}/packages/${project}/${project}`,
        `https://cdn.jsdelivr.net/npm/@zk-kit/${project}-artifacts@${version}/${project}`,
    ];
}
async function getSnarkArtifactUrls(project, options = {}) {
    if (!projects.includes(project))
        throw new Error(`Project '${project}' is not supported`);
    options.version ??= 'latest';
    const urls = await getBaseUrls(project, options.version);
    const parameters = options.parameters
        ? `-${options.parameters.join('-')}`
        : '';
    return {
        wasms: urls.map((url) => `${url}${parameters}.wasm`),
        zkeys: urls.map(url => `${url}${parameters}.zkey`),
    };
}

// TODO: retry for browser?
// beisdes, is caching already handled by circom/snarkjs?
async function maybeGetSnarkArtifacts(...pars) {
    const { wasms, zkeys } = await getSnarkArtifactUrls(...pars);
    return {
        wasm: wasms[0],
        zkey: zkeys[0],
    };
}

export { Project, getAvailableVersions, maybeGetSnarkArtifacts, projects };
